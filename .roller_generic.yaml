## ESPHome
esphome:
  on_boot:
    - priority: -200.0
      then:
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Started'
        - stepper.report_position: # Set stepper to global variable
            id: ${mystepper}
            position: !lambda return id(${mystepper}_global);
        - stepper.set_target: # Set stepper to global variable
            id: ${mystepper}
            target: !lambda return id(${mystepper}_global);
        - if: # If blind is Closed
            condition:
              - lambda: 'return id(${mystepper}_global) == 0;'
            then: # Publish state etc.
              - cover.template.publish:
                  id: ${mystepper}_blinded
                  state: CLOSED
              - globals.set:
                  id: ${mystepper}_last_action
                  value: '2'
              - text_sensor.template.publish:
                  id: ${mystepper}_current_status
                  state: 'Closed'
        - if: # If blind is Open
            condition:
              - lambda: 'return id(${mystepper}_global) == id(${mystepper}_endstop);'
            then: # Publish state etc.
              - cover.template.publish:
                  id: ${mystepper}_blinded
                  state: OPEN
                  current_operation: IDLE
              - globals.set:
                  id: ${mystepper}_last_action
                  value: '0'
              - text_sensor.template.publish:
                  id: ${mystepper}_current_status
                  state: 'Open'
        - if: # If blind is Neither
            condition:
              - lambda: 'return (id(${mystepper}_global) != 0) && (id(${mystepper}_global) != id(${mystepper}_endstop));'
            then: #  # Publish state etc.
              - cover.template.publish:
                  id: ${mystepper}_blinded
                  position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
                  current_operation: IDLE
              - globals.set:
                  id: ${mystepper}_last_action
                  value: '0'
              - text_sensor.template.publish:
                  id: ${mystepper}_current_status
                  state: !lambda |-
                    int pos = round(float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))) * 100);
                    return (
                      ("Open: ") +
                      (pos ? String(pos) + "%" : "")
                    ).c_str();

## Text sensors with general information.
text_sensor:
  - platform: template
    name: '${mystepper} Last Action'
    update_interval: never
    id: ${mystepper}_current_status
    icon: 'mdi:chart-box-outline'
  - platform: template
    name: 'Setup Position'
    id: ${mystepper}_setup_position
    icon: 'mdi:null'

## Buttons
button:
  - platform: template
    name: '${mystepper} Action Button' # Button to replicate the Physical Button once Settings Mode has been entered
    icon: 'mdi:gesture-tap-button'
    on_press:
      - if: # If settings variable is on
          condition:
            - lambda: 'return id(${mystepper}_settingmode) != 0;'
          then: # Enter Setting Mode
            - script.execute: ${mystepper}_setupbutton


    
## Stepper
stepper:
  - platform: uln2003
    id: $mystepper
    pin_a: ${pinA}
    pin_b: ${pinB}
    pin_c: ${pinC}
    pin_d: ${pinD}
    max_speed: '${speed}' # Speed of the motor
    sleep_when_done: True
    acceleration: inf
    deceleration: inf

## Globals
globals:
  - id: ${mystepper}_global # Integer for storing the stepper position in case of reboot
    type: int
    restore_value: true
    initial_value: '0'

  - id: ${mystepper}_openclosed # Boolean to store OPEN/CLOSED state
    type: bool
    restore_value: true
    initial_value: '0'

  - id: ${mystepper}_endstop # Variable for storing ENDSTOP (how far to move stepper)
    type: int
    restore_value: true
    initial_value: '1000'

  - id: ${mystepper}_settingmode # Integer for Setup Mode
    type: int
    restore_value: no
    initial_value: '0'

  - id: ${mystepper}_feedback # Boolean for continuous feedback
    type: bool
    restore_value: no
    initial_value: '1' # Default value for continuous feedback: Set to '1' and the cover reports back current position continuously / Set to '0' and the cover updates in the beginning and end of the requested operation

  - id: ${mystepper}_last_action # Integer for last action
    type: int
    restore_value: no
#    initial_value: '0'
## 0=STOPPED WHILE OPENING
## 1=CLOSING / MOVING DOWN
## 2=STOPPED WHILE CLOSING
## 3=OPENING / MOVING UP

number:
  - platform: template
    name: 'Speed of ${mystepper}'
    id: ${mystepper}_rollerspeed
    icon: 'mdi:speedometer'
    max_value: '${maxspeed}'
    min_value: '${minspeed}'
    step: '${speedsteps}'
    mode: slider
    initial_value: '${speed}'
    optimistic: true
    on_value:
      - stepper.set_speed:
          id: '${mystepper}'
          speed: !lambda "return x;"
      - text_sensor.template.publish:
          id: ${mystepper}_current_status
          state: 'Set new steps/s for stepper motor'

## Switch
switch:
  - platform: template
    name: '${mystepper} Activate Setup' # Switch to enter Setup Mode
    id: ${mystepper}_setupswitch
    icon: 'mdi:cog-outline'
    lambda: |-
      if (id(${mystepper}_settingmode) != 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        - logger.log: 'Entered Settings Mode'
        - globals.set:
            id: ${mystepper}_settingmode
            value: '1'
        - text_sensor.template.publish:
            id: ${mystepper}_setup_position
            state: 'S0'
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Setup has been activated, click [Action Button] to set and store the closed and open positions.'
        - switch.turn_on:
            id: blue_led
    turn_off_action:
      then:
        - logger.log: 'Exiting Settings Mode'
        - globals.set:
            id: ${mystepper}_settingmode
            value: '0'
        - text_sensor.template.publish:
                id: ${mystepper}_setup_position
                state: ''
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Setup cancelled'
        - switch.turn_off:
            id: blue_led

  - platform: template
    name: 'Continuous feedback of ${mystepper}' # Switch to activate continuous feedback
    id: ${mystepper}_feedbackswitch
    icon: 'mdi:sync'
    lambda: |-
      if (id(${mystepper}_feedback) != 0) {
        return true;
      } else {
        return false;
      }
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: 'Activated Continuous Feedback'
      - globals.set:
          id: ${mystepper}_feedback
          value: '1'
      - text_sensor.template.publish:
          id: ${mystepper}_current_status
          state: 'Activated Continuous Feedback'
    turn_off_action:
      - logger.log: 'Disabled Continuous Feedback'
      - globals.set:
          id: ${mystepper}_feedback
          value: '0'
      - text_sensor.template.publish:
          id: ${mystepper}_current_status
          state: 'Disabled Continuous Feedback'

## Cover
cover:
  - platform: template
    name: '${mystepper} Roller'
    id: ${mystepper}_blinded
    open_action:
      then:
        - logger.log: 'Opening'
        - stepper.set_target: # Send stepper to endstop
            id: ${mystepper}
            target: !lambda return id(${mystepper}_endstop);
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Opening'
        - if: # If continuous feedback switch is on
            condition:
              - lambda: 'return id(${mystepper}_feedback) != 0;'
            then: # With continuous feedback
              - while:
                  condition:
                    lambda: 'return id(${mystepper}).current_position != id(${mystepper}_endstop);'
                  then:
                    - cover.template.publish:
                        id: ${mystepper}_blinded
                        position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
                        current_operation: OPENING
                    - delay: ${delaybetweenupdates}
            else: # Without contiunous feedback
              - cover.template.publish:
                  id: ${mystepper}_blinded
                  position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
                  current_operation: OPENING
              - wait_until: # Wait until ${mystepper}_endstop reached
                  lambda: 'return (id(${mystepper}).current_position == id(${mystepper}_endstop));'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - globals.set: # Set toggle to OPEN (No need for 'optimistic mode')
            id: ${mystepper}_openclosed
            value: '1'
        - cover.template.publish:
            id: ${mystepper}_blinded
            state: OPEN
            current_operation: IDLE
        - globals.set:
            id: ${mystepper}_last_action
            value: '0'
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Open'
    close_action:
      then:
        - logger.log: 'Closing'
        - stepper.set_target: # Send stepper to 0
            id: ${mystepper}
            target: '0'
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Closing'
        - if: # If continuous feedback switch is on
            condition:
              - lambda: 'return id(${mystepper}_feedback) != 0;'
            then: # With continuous feedback
              - while:
                  condition:
                    lambda: 'return id(${mystepper}).current_position != 0;'
                  then:
                    - cover.template.publish:
                        id: ${mystepper}_blinded
                        position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
                        current_operation: CLOSING
                    - delay: ${delaybetweenupdates}
            else: # Without continuous feedback
              - cover.template.publish:
                  id: ${mystepper}_blinded
                  position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
                  current_operation: CLOSING
              - wait_until: # Wait until ${mystepper}_endstop reached
                  lambda: 'return id(${mystepper}).current_position == 0;'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - globals.set: # Set toggle to CLOSED (No need for 'optimistic mode')
            id: ${mystepper}_openclosed
            value: '0'
        - cover.template.publish:
            id: ${mystepper}_blinded
            state: CLOSED
            current_operation: IDLE
        - globals.set:
            id: ${mystepper}_last_action
            value: '2'
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Closed'
    position_action:
      then:
        - stepper.set_target:
            id: ${mystepper}
            target: !lambda return int(id(${mystepper}_endstop) * pos);
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: !lambda |-
                      return (
                        (pos ? "Moving to set position: " + String(int(pos * 100)) + "%" : "")
                      ).c_str();
        - if: # If continuous feedback switch is on
            condition:
              - lambda: 'return id(${mystepper}_feedback) != 0;'
            then: # With continuous feedback
              - while:
                  condition:
                    lambda: 'return id(${mystepper}).current_position != int(id(${mystepper}_endstop) * pos);'
                  then:
                    - cover.template.publish:
                        id: ${mystepper}_blinded
                        position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
                    - delay: ${delaybetweenupdates}
            else: # Without continuous feedback
              - wait_until: # Wait until ${mystepper}_endstop reached
                  lambda: 'return id(${mystepper}).current_position == (int(id(${mystepper}_endstop) * pos));'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id(${mystepper}).current_position;
        - cover.template.publish:
            id: ${mystepper}_blinded
            position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
            current_operation: IDLE
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: !lambda |-
                      return (
                        (pos ? "Reached set position: " + String(int(pos * 100)) + "%" : "")
                      ).c_str();
    stop_action:
      then:
        - stepper.set_target:
            id: ${mystepper}
            target: !lambda return id(${mystepper}).current_position;
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id(${mystepper}).current_position;
        - cover.template.publish:
            id: ${mystepper}_blinded
            position: !lambda 'return (float(float(id(${mystepper}).current_position) / float(id(${mystepper}_endstop))));'
            current_operation: IDLE
        - text_sensor.template.publish:
            id: ${mystepper}_current_status
            state: 'Stopped'
    has_position: true
    device_class: blind

## Scripts
script:
  - id: ${mystepper}_setupbutton
    then:
      - if:
          condition:
            - lambda: 'return (id(${mystepper}_settingmode) == 3);'
          then:
            - logger.log: 'Pressed Action Button: Mode 3'
            - stepper.set_target: # Set Stepper position
                id: ${mystepper}
                target: !lambda return id(${mystepper}).current_position;
            - globals.set: # Set ${mystepper}_endstop Variable
                id: ${mystepper}_endstop
                value: !lambda return id(${mystepper}).current_position;
            - globals.set: # Set Global stepper position
                id: ${mystepper}_global
                value: !lambda return id(${mystepper}).current_position;
            - globals.set: # Reset Setting Mode
                id: ${mystepper}_settingmode
                value: '0'
            - globals.set: # Set toggle to Open
                id: ${mystepper}_openclosed
                value: '1'
            - cover.template.publish:
                id: ${mystepper}_blinded
                state: OPEN
                current_operation: IDLE
            - logger.log: 'Exiting Setting Mode'
            - text_sensor.template.publish:
                id: ${mystepper}_setup_position
                state: 'S3'
            - text_sensor.template.publish:
                id: ${mystepper}_current_status
                state: 'Setup complete, settings stored.'
            - switch.turn_off:
                id: blue_led
      - if:
          condition:
            - lambda: 'return (id(${mystepper}_settingmode) == 2);'
          then:
            - logger.log: 'Pressed Action Button: Mode 2'
            - stepper.report_position: # Reset Stepper position to 0
                id: ${mystepper}
                position: '0'
            - stepper.set_target: # Reset Stepper position to 0
                id: ${mystepper}
                target: '0'
            - globals.set: # Move stepper to 0 (doesn't move it's already there!)
                id: ${mystepper}_global
                value: '0'
            - stepper.set_target: # Reset Stepper position to 72000
                id: ${mystepper}
                target: !lambda return int(${motorReversed} * 72000);
            - globals.set: # Advance setup to next mode
                id: ${mystepper}_settingmode
                value: '3'
            - text_sensor.template.publish:
                id: ${mystepper}_setup_position
                state: 'S2'
            - text_sensor.template.publish:
                id: ${mystepper}_current_status
                state: 'Step 2: Click [Action Button] when the wanted open position has been reached.'
      - if:
          condition:
            - lambda: 'return (id(${mystepper}_settingmode) == 1);'
          then:
            - logger.log: 'Pressed Action Button: Mode 1'
            - stepper.report_position: # Set Stepper position to 72000, makes it move to 0 (Closed)
                id: ${mystepper}
                position: !lambda return int(${motorReversed} * 72000);
            - globals.set: # Advance setup to next mode
                id: ${mystepper}_settingmode
                value: '2'
            - text_sensor.template.publish:
                id: ${mystepper}_setup_position
                state: 'S1'
            - text_sensor.template.publish:
                id: ${mystepper}_current_status
                state: 'Step 1: Click [Action Button] when the wanted closed position has been reached.'
