# REALiAM: https://github.com/R34LiAM/HA-Roller
# Heavily inspried by PeterG: https://www.thingiverse.com/pgote/designs
# And RoadkillUK: https://github.com/RoadkillUK/Motor-on-a-Roller-Blind-for-ESPHOME

# Tested on ESPHome Device Builder 2025.3.0 but will probably work fine on later revisions

# All that needs to be changed before compiling and flashing is in the 'substitutions:' section below.
# you may need to change the 'esp8266:' section as well depending on what board and model you use...

# Once the ESP has booted for the first time it's time for configuration
# The easiest way, if using Home Assistant, is to use the yaml-code in the card from this repo.
# OR access the webGUI at <coverip>:80 or <hostname>.local:80 if you have mDNS, or use a hardwired button to configure it.
# I recommend wiring a button so the roller can be controlled "manually" at the window, See setup option 2 below.
# If no button is wired see setup option 1 or 3 below for setup using Home Assistant or the webGUI.

# Setup option 1 (Easiest)
#-----------------------------
# Add the yaml-code from this repo to your Home Assistant dashboard.
# 1) Expand the 'Setup, Settings and Parameters' section in the card and click 'Activate Setup'.
# 2) Follow the on screen instructions...
# Repeat from step 1 if you need to reconfigure in the future.

# Setup option 2 (Recommended)
#-----------------------------
# This sketch also includes support for a momentary button wired to the substitute value of 'pinButton' below, which can be used in the following way:
# 1) Press button for > 4 seconds and then release, to enter setup mode.
# 2) Press button again to start closing the blind.
# 3) Once the position you want as 100% closed (fully closed) is reached, press the button. 
#    The blind will instantly start to open again (actually resets the stepper position to 0)
# 4) Once the position you want as 100% open (fully open) is reached, press the button.
# 5) Done.
# The button loops through states as: open/stop/close/stop/open....... once configured.
# Repeat from step 1 if you need to reconfigure in the future.

# Setup option 3
#---------------
# 1) Turn on the 'Activate Setup' Switch to enter setup mode.
# 2) Press Action button to start the blind closing.
# 3) Press Action button again when closed and blind starts to open. (actually resets the stepper position to 0)
# 4) Press Action button again when blind is fully open.
# 5) Done.

# Add to your frontend of choice.
# Home Assistant using the ESPHome API integration or MQTT.
# HomeKit using Homebridge and mqttthing or via Home Assistant's HomeKit integration.
# And more...

# What has been changed added?!
# Added some extra sensors that report back to Home Assistant since they are availiable for free (uptime / reset button / wifi signal and so on)
# Added support for stopping while moving up and down and start moving in the reverse direction using just one button
# Added ability to choose wether ESP should report back to Home Assistant continuously or only when it has reached the set position (combined the functionallity of RoadkillUK's two seperate scripts)
# Removed 'Silent Drive Mode' option, since the stepper speed can now be easily adjusted at runtime
# Added ability to "adjust" stepper speed, perfect for automations that run late at night when more quiet operation is preferred over speed. (for a 28byj-48 5v stepper motor a value of 600-700 steps/s works well)
# Added visual cue, the onboard LED of the Wemos D1 mini lights up (blue) to indicate when in setup mode, might need "allow_other_uses: true" for older designs
# Rearranged a whole lot to make it easier to change needed parameters

# Pretty much everything is customized in the "substitutions"-section below.
# If not using a "secrets"-file (which I recommend) you also have to change:
# !secret ota_password
# !secret wifi_ssid
# !secret wifi_password
# !secret api_password
# !secret ap_fallback_wifi_password

##########################################################
##########################################################
# CONTROL USING MQTT TOPICS
##########################################################
##########################################################
# The topics change according to your [hostname] defined
# under the substitutions section below. Example below
# is with hostname set to "rullgardin01"
# MQTT needs to be activated and configured below
#
# For current position, subscribe to the following topic:
# rullgardin01/cover/rullgardin01_roller/position/state
#
# To set position, publish to the following topic: (0-100, 0=close, 100=open)
# rullgardin01/cover/rullgardin01_roller/position/command
#
# To stop, closing or opening, publish the current position to the following topic:
# rullgardin01/cover/rullgardin01_roller/position/command
#
# To set "Continuous feedback switch", (ON/OFF) publish to the following topic:
# rullgardin01/switch/rullgardin01_continuous_feedback/command
# rullgardin01/switch/rullgardin01_continuous_feedback/command
#
# To Reboot ESP, publish (ON) to the following topic:
# rullgardin01/switch/rullgardin01_restart/command
#
##########################################################
##########################################################
# CONTROL USING POST TO REST API
##########################################################
##########################################################
# The calls change according to your [hostname] defined
# under the substitutions section below. Example below
# is with hostname set to "rullgardin01".
# Works with IP instead of .local if you don't use mDNS/Multicast
#
# Using POST you can control it using the following URL's
# Open:
# http://rullgardin01.local/cover/rullgardin01_roller/open
#
# Close:
# http://rullgardin01.local/cover/rullgardin01_roller/close
#
# Stop current operation (while opening or closing):
# http://rullgardin01.local/cover/rullgardin01_roller/stop
#
# Set position:
#   fully closed:
#   http://rullgardin01.local/cover/rullgardin01_roller/set?position=0.0
#   fully open:
#   http://rullgardin01.local/cover/rullgardin01_roller/set?position=1.0
#   halfway open/closed:
#   http://rullgardin01.local/cover/rullgardin01_roller/set?position=0.5
#   And so on...

# Wemos D1 mini pin/GPIO layout
# D0 = GPIO16
# D1 = GPIO5
# D2 = GPIO4
# D3 = GPIO0
# D4 = GPIO2 (internal LED, don't use or add "allow_other_uses: true" might work)
# D5 = GPIO14
# D6 = GPIO12
# D7 = GPIO13
# D8 = GPIO15
# TX = GPIO1
# RX = GPIO3
# A0 = ADC0

## Main Substitutions
substitutions:
  sub_hostname: 'esp-blinds-8e0d09' # hostname/devicename/esphome sensors (keep lcase)
  sub_friendly_name: 'ESP blinds' # More easily identify you roller
  coverip: '192.168.100.30' # Static IP
  covergateway: '192.168.100.1'
  coversubnet: '255.255.255.0'
  speed: '700' # Default value, as an example, steps/s (speed) of the motor set to a value between 600-700 is usually ok for operating a "fridans" of 140 cm in width...
  speedsteps: '50' # With what value should the step/s (speed) increase/decrease when configuring.
  minspeed: '100' # What value could be set as the minimum step/s (speed).
  maxspeed: '1000' # What value could be set as the maximum step/s (speed).
  ## specify your mqtt-broker ip, uncomment to use and don't forget to uncomment the "MQTT:" section below as well
  #mqtt_broker_ip: '192.168.0.211'
  delaybetweenupdates: 500 ms # Milliseconds between updates being pushed to Home Assistant ESPHome API
  motorReversed: '1' # Change to -1 (for ULN2003) if roller blind goes up instead of down and vice versa (reverse direction), need to redo the setup
  pinLED: GPIO2 # Used for the Wemos on board LED to indicate when in "setup-mode"/LED on


## MQTT
## Uncomment below if you want to control it using MQTT and uncomment "api:"-section  for HA ESPHome API above
#mqtt:
#  broker: $mqtt_broker_ip
#  discovery: True
#  username:
#  password:
#  on_message:
#    topic: $sub_hostname/ir/send
#    then:
#    - remote_transmitter.transmit_raw:
#        carrier_frequency: 38kHz
#        code: !lambda |-
#          std::string txstr = x;
#          std::vector<int> txv;
#          char * token;
#          char seps[] = ",";
#          token = strtok (&txstr[0],seps);
#          while (token != NULL)
#          {
#            txv.push_back( atoi(token) );
#            token = strtok (NULL, seps);
#          }
#          return txv;


## Enable Home Assistant ESPHome API
## Comment out this section if you are not using HA ESPHome API and instead use MQTT or if you use them as standalone units controlled via the "action" button. (standalone means you comment out both MQTT and API)
api:
  reboot_timeout: 120s

# No changes needed below this line ##################################################################################################
# No changes needed below this line ##################################################################################################
# No changes needed below this line ##################################################################################################
# No changes needed below this line ##################################################################################################

## Board model
esp8266:
  board: d1_mini_lite
  restore_from_flash: true

## ESPHome
esphome:
  name: '${sub_hostname}'
  friendly_name: '${sub_hostname} (${sub_friendly_name})'

## WIFI
wifi:
  power_save_mode: HIGH
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  use_address: ${coverip}
  manual_ip:
    static_ip: ${coverip}
    gateway: ${covergateway}
    subnet: ${coversubnet}
  # Enable fallback hotspot (captive portal) in case wifi connection fails...
  ap:
    ssid: '${sub_hostname} Hotspot'
    password: ''

# ## Webserver 
# web_server:
#   port: 80

## Enable logging
logger:
#  level: VERBOSE

## Captive portal
captive_portal:

## OTA
ota:
  platform: esphome

## Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

## Send IR codes (IR-blaster)
#remote_transmitter:
#  pin: 
#    number: $pinIRSend
#  carrier_duty_percent: 50%

## Text sensors with general information.
text_sensor:
  ## Expose ESPHome version as sensor.
  - platform: version
    name: 'ESPHome Version'
  ## Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: 'IP'
      icon: 'mdi:ip-network-outline'
    ssid:
      name: 'SSID'
      icon: 'mdi:access-point'
    bssid:
      name: 'BSSID'
      icon: 'mdi:access-point'
    mac_address:
      name: 'MAC'
      icon: 'mdi:expansion-card-variant'
  - platform: template
    name: 'Friendly Name'
    icon: 'mdi:heart-outline'
    lambda: |-
      return {"${sub_friendly_name}"};
  - platform: template
    name: 'Uptime HR'
    id: uptime_human
    icon: 'mdi:timer-outline'
  - platform: template
    name: 'Motor Direction'
    id: stepper_operation
    icon: 'mdi:swap-vertical-circle-outline'
    lambda: |-
      return {"${motorReversed}"};

## Buttons
button:
  ## Button to restart the device
  - platform: restart
    name: 'Restart'
    icon: 'mdi:restart'
  - platform: safe_mode
    name: 'Restart (Safe Mode)'
    icon: 'mdi:restart-alert'
    

## Sensors with general information.
sensor:
  ## Uptime sensor.
  - platform: uptime
    name: 'Uptime'
    id: 'upptime'
    icon: 'mdi:timer-outline'
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(upptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
  ## WiFi Signal sensor.
  - platform: wifi_signal
    name: 'WiFi Signal'
    update_interval: 120s
    icon: 'mdi:wifi-strength-3'

## Switch
switch:
  - platform: gpio
    name: 'Blue LED'
    internal: true
    id: blue_led
    icon: 'mdi:alarm-light'
    pin:
      number: ${pinLED}
      #Legacy uncomment "allow_other_uses: true" if using old pcb
      #allow_other_uses: true
      mode: OUTPUT
    inverted: true
    restore_mode: ALWAYS_OFF

packages:
  # ****** LOLIN D1 Mini ESP8266 v3.0.0  ****** 
  roller1: !include
    file: .roller_generic.yaml
    vars:
      mystepper: 'test_stepper'
      # pinButton: GPIO3 #RX # physical button to controll the roller blind (up/stop/down/stop/up.......) (hold for +5 seconds to enter setup mode/press once to start closing, press again at maximum-/bottom position, lastly press at minimum-/top position)
      pinA: GPIO5
      pinB: GPIO4
      pinC: GPIO0
      pinD: GPIO1
  roller1_button: !include
    file: .roller_button.yaml
    vars:
      mystepper: 'test_stepper'
      pinButton: GPIO3 #RX # physical button to controll the roller blind (up/stop/down/stop/up.......) (hold for +5 seconds to enter setup mode/press once to start closing, press again at maximum-/bottom position, lastly press at minimum-/top position)
  roller2: !include
    file: .roller_generic.yaml
    vars:
      mystepper: 'right_stepper'
      # pinButton: GPIO12 #D0 # physical button to controll the roller blind (up/stop/down/stop/up.......) (hold for +5 seconds to enter setup mode/press once to start closing, press again at maximum-/bottom position, lastly press at minimum-/top position)
      pinA: GPIO16
      pinB: GPIO14
      pinC: GPIO13
      pinD: GPIO15
  roller2_button: !include
    file: .roller_button.yaml
    vars:
      mystepper: 'right_stepper'
      pinButton: GPIO12 #RX # physical button to controll the roller blind (up/stop/down/stop/up.......) (hold for +5 seconds to enter setup mode/press once to start closing, press again at maximum-/bottom position, lastly press at minimum-/top position)
